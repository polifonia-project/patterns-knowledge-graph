PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>
PREFIX jams: <http://w3id.org/polifonia/ontology/jams/>
PREFIX mp:  <http://w3id.org/polifonia/ontology/musical-performance/>
PREFIX mf:  <http://w3id.org/polifonia/ontology/musical-features/>
PREFIX mc:  <http://w3id.org/polifonia/ontology/musical-composition/>
PREFIX core:  <http://w3id.org/polifonia/ontology/core/>
PREFIX pon-resource: <http://w3id.org/polifonia/resource/>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX roman: <http://w3id.org/polifonia/ontology/roman/>
PREFIX poly: <http://w3id.org/polifonia/ontology/polychord/>
PREFIX chord: <http://purl.org/ontology/chord/>

CONSTRUCT {
    # the file from which the data is extracted
    ?jams_file_uri a jams:JAMSFile ;
        jams:jamsVersion ?jams_version ;
        jams:release ?release ;
        jams:beatsDuration ?beats_duration;
        prov:wasDerivedFrom ?corpus ;
        prov:wasMemberOf <https://github.com/ashahidkhattak/thesession> .

    # COMPOSITION
    ?composition_uri a mc:MusicalComposition ;
        rdfs:label ?title ;
        mc:title ?title ;
        prov:wasDerivedFrom ?jams_file_uri ;
        # only if the sandbox.type = score
        jams:tuneId     ?tuneId;
        jams:beatsDuration ?beats_duration_float;
        jams:tuneContent  ?tuneContent;
        jams:tuneFeatureData  ?tuneFeatureData;
        jams:transcriber  ?transcriberURI;
		jams:tuneType 	  ?tuneTypeURI;
        jams:tuneFamily   ?tuneFamilyURI;
		jams:key		  ?tuneKeyURI;
		jams:timeSignature ?tuneTimeSignatureURI;
        ?composer_type_relation ?composer_uri .

    # ARTIST COMPOSER
    ?composer_uri ?composer_is_type core:Agent ;
        rdfs:label ?composer .

    # ARTIST PERFORMER
    ?performer_uri ?performer_is_type core:Agent ;
        rdfs:label ?performer .

    # ANNOTATION
    ?annotation_uri a jams:JAMSAnnotation ;
        a ?jams_annotation_type .


    # ANNOTATOR
    #pon-resource:Agent%2Fannotator_local_id a core:Agent ;
    #    jams:hasName ?annotator_name ;
    #    jams:hasAnnotatorType ?annotator_type_uri ;
    #    rdfs:label ?annotator_name .

    # ANNOTATION
    ?annotation_uri a jams:JAMSAnnotation ;
        a ?jams_annotation_type ;
        ?score_is_jams_annotation_of ?composition_uri ;
        jams:includesObservation ?observation_uri.

    # SCORE
    # if it a score, we create a score individual and its description (duration, provenance)
    ?score_uri ?is_score_of ?composition_uri ;
        ?score_type mf:Score ;
        ?score_label ?title ;
        ?score_derived_from ?jams_file_uri ;
        ?performer_no_audio ?performer_uri ;
        ?score_has_jams_annotation ?composition_uri .

    # OBSERVATION
    ?observation_uri a jams:JAMSObservation ,
        ?observation_type, ?occurrence_type ;
        #rdfs:label ?observation_value ;
        #jams:hasConfidence ?confidence ;
        #jams:hasDuration ?observation_duration_float ;
        #?score_observation_starts_at ?metrical_time_uri_observation ;
        #?audio_observation_starts_at ?observation_time_float ;
        #jams:ofChord ?chord_uri ;
        # PATTERN ADDITION
        #jams:hasFrequency ?pattern_frequency ;
        jams:hasPatternType ?pattern_type ;
        jams:ofPattern ?pattern_uri ;
        jams:hasPatternLocation ?observation_time_float;
        jams:hasPatternComplexity ?observation_complexity_float.

}

WHERE {
    SERVICE <x-sparql-anything:%FILEPATH%,media-type=application/json> {
        #SERVICE <x-sparql-anything:D:/Python-Projects/JAMS-Annotation/jams-ontology-main/utils/demo2/new.jams,media-type=application/json> {

    # ?f xyz:file%5Fmetadata ?file_metadata .
    # ?file_metadata xyz:title ?title .
    # ?f fx:anySlot ?s .
    # ?file a fx:root .

    ##############
    # SANDBOX
    ##############

    OPTIONAL {?transcriber xyz:sandbox ?sandbox .
            ?sandbox xyz:transcriber ?transcriberName .}
    OPTIONAL {?content xyz:sandbox ?sandbox .
            ?sandbox xyz:content ?tuneContent .}
    OPTIONAL {?tunetype xyz:sandbox ?sandbox .
            ?sandbox xyz:tunetype ?tuneTypeName.}
    OPTIONAL {?key xyz:sandbox ?sandbox .
            ?sandbox xyz:key ?keyName .}
    OPTIONAL {?idoftune xyz:sandbox ?sandbox .
            ?sandbox xyz:tuneid ?tuneId.
    }
    OPTIONAL {?tunefamily xyz:sandbox ?sandbox .
            ?sandbox xyz:tunefamily ?tuneFamilyName.}
    OPTIONAL {?feature_data xyz:sandbox ?sandbox .
            ?sandbox xyz:feature_data ?tuneFeatureData.}
    OPTIONAL {?timesig xyz:sandbox ?sandbox .
            ?sandbox xyz:timesig ?timeSignatureName .}
    OPTIONAL {?x xyz:sandbox ?sandbox .
            ?sandbox xyz:type ?object_type .}
    OPTIONAL {?sandbox xyz:performers ?performer_list .
    ?performer_list fx:anySlot ?performer .}
    OPTIONAL {?sandbox xyz:composers ?composer_list .
    ?composer_list fx:anySlot ?composer.}


    OPTIONAL {
        FILTER (?composer != "")
            BIND (mc:hasComposer AS ?composer_type_relation)
            BIND (rdf:type AS ?composer_is_type)
            BIND (rdf:type AS ?score_type)
            BIND (mc:isScoreOf AS ?is_score_of)
            BIND (rdfs:label AS ?score_label)
            BIND (mf:duration AS ?score_duration)
    }
    OPTIONAL {
        FILTER (?performer != "")
            BIND (mp:performedBy AS ?performer_type_relation)
            BIND (rdf:type AS ?performer_is_type)
    }

    OPTIONAL {
        FILTER (?object_type = "score")
            # annotation time information
            BIND (jams:JAMSScoreObservation AS ?observation_type)
            # observation
            BIND (jams:hasJAMSAnnotation AS ?score_has_jams_annotation)
            BIND (jams:isJAMSAnnotationOf AS ?score_is_jams_annotation_of)
    }

    ###################
    # ANNOTATIONS
    ###################
    ?x xyz:annotations ?jams_annotations .
    ?jams_annotations fx:anySlot ?annotation_properties .
    ?annotation_properties xyz:namespace ?namespace .
    ?annotation_properties xyz:sandbox ?annotation_sandbox .
    ?annotation_properties xyz:annotation%5Fmetadata ?annotation_metadata .
    ?annotation_properties xyz:time ?annotation_time .
    OPTIONAL {
    ?annotation_properties xyz:duration ?annotation_duration .
    BIND (xsd:float(?annotation_duration) AS ?annotation_duration_float)
    BIND (STR(xsd:float(?annotation_time)) AS ?annotation_time_float)
    }
    BIND (IF
            (CONTAINS(?annotation_time_float, "."),
            (xsd:int(STRBEFORE(?annotation_time_float, "."))),
            xsd:int(?annotation_time_float)) AS ?annotation_time_measure)
    BIND (IF
            (CONTAINS(?annotation_time_float, "."),
            (xsd:int(STRAFTER(?annotation_time_float, "."))),
            xsd:int(0)) AS ?annotation_time_beat)
    ?annotation_properties xyz:data ?data.


    #BIND (IF (?namespace = "key_mode", jams:ScoreKeyModeOccurrence, jams:ScoreChordOccurrence) AS ?occurrence_type )

    #####################
    # ANNOTATION METADATA
    #####################
    ?annotation_metadata xyz:curator ?curator .
    OPTIONAL {?curator xyz:name ?curator_name .}
    OPTIONAL {?curator xyz:email ?curator_email .}
    ?annotation_metadata xyz:annotator ?annotator .
    OPTIONAL {?annotator xyz:name ?annotator_name .}
    OPTIONAL {?annotator xyz:email ?annotator_email .}
    ?annotation_metadata xyz:data%5Fsource ?annotator_type .

    ?annotation_metadata xyz:version ?version .
    ?annotation_metadata xyz:corpus ?corpus .
    ?annotation_metadata xyz:annotation%5Ftools ?annotation_tools .
    OPTIONAL{?annotation_metadata xyz:annotation%5Frules ?annotation_rules .}
    OPTIONAL{?annotation_metadata xyz:validation ?validation .}

    #####################
    # OBSERVATION
    #####################
    OPTIONAL {
        FILTER (CONTAINS(?namespace, "pattern"))
        ?data fx:anySlot ?observation .
        ?observation xyz:value ?observation_value .
        ?observation xyz:time ?observation_time .
        #?observation_value xyz:pattern%5Flocation ?pattern_location.
        #?pattern_location fx:anySlot ?plocation.

        BIND (xsd:float(?observation_time) AS ?observation_time_float)
        BIND (IF (CONTAINS(?observation_time_float, "."),
        (xsd:int(STRBEFORE(?observation_time_float, "."))),
        xsd:int(?observation_time_float)) AS ?observation_time_measure)

        BIND (IF
        (CONTAINS(?observation_time_float, "."),
        (xsd:int(STRAFTER(?observation_time_float, "."))),
        xsd:int(0)) AS ?observation_time_beat)

        ?observation xyz:confidence ?observation_confidence .
        ?observation xyz:duration ?observation_duration .
        BIND (xsd:float(?observation_duration) AS ?observation_duration_float )
        BIND (jams:ScorePatternOccurrence AS ?occurrence_type)

        ?observation_value xyz:pattern%5Fcontent ?pattern_content ;
        xyz:pattern%5Ftype ?pattern_type ;
        xyz:pattern%5Flength ?pattern_length;
        xyz:pattern%5Fcomplexity ?observation_complexity .
        BIND (xsd:float(?observation_complexity) AS ?observation_complexity_float )

    }
    ###################
    # FILE METADATA
    ###################
    ?x xyz:file%5Fmetadata ?file_meta .
    OPTIONAL {?file_meta xyz:title ?title .}
    OPTIONAL {?file_meta xyz:jams%5Fversion ?jams_version .}
    ?file_meta xyz:identifiers ?ids .
    OPTIONAL {?ids xyz:music%5Fbrainz ?mb_id .}
    OPTIONAL {?ids xyz:discogs ?discogs_id .}
    OPTIONAL {?ids xyz:perlam ?perlam_id .}
    OPTIONAL {?file_meta xyz:release ?release .}
    OPTIONAL {?file_meta xyz:duration ?fduration .}
    OPTIONAL {?file_meta xyz:artist ?artist .}
    OPTIONAL {?file_meta xyz:duration ?beats_duration .
        BIND (round(xsd:float(?beats_duration)) AS ?beats_duration_float )
    }

    # PLACEHOLDER URIs
    #BIND (IRI(CONCAT(STR(pon-resource:MusicalComposition), "/song_local_id")) AS ?composition_uri)
    BIND (IRI(CONCAT(STR(pon-resource:MusicalComposition),"/", SHA1(CONCAT(?tuneId,?title)))) AS ?composition_uri)
    BIND (IRI(CONCAT(STR(pon-resource:JAMSFile), "/", SHA1(CONCAT(?tuneId,?title)))) AS ?jams_file_uri)
    BIND (IRI(CONCAT(STR(pon-resource:JAMSAnnotation), "/", SHA1(CONCAT(?tuneId, ?title)))) AS ?annotation_uri)
    # BIND (IRI(CONCAT(STR(pon-resource:JAMSObservation), "/", REPLACE (STR(REPLACE(STR(?observation_value), " ", "_")), "/", "_"), "@", STR(?observation_time_float))) AS ?observation_uri)
    BIND (IRI(CONCAT(STR(pon-resource:Agent), "/Composer/", STR(REPLACE(?composer, " ", "_"))  )) AS ?composer_uri)
    BIND (IRI(CONCAT(STR(pon-resource:Agent), "/Performer/", STR(REPLACE(?performer, " ", "_"))  )) AS ?performer_uri)}
    BIND (IRI(CONCAT(STR(pon-resource:pattern), "/", REPLACE(STR(?pattern_content), ", ", "_"))) AS ?pattern_uri)

    BIND (IRI(CONCAT(STR(pon-resource:transcriber), "/", REPLACE(STR(?transcriberName), ",", "_"))) AS ?transcriberURI)
    BIND (IRI(CONCAT(STR(pon-resource:tunetype), "/", REPLACE(STR(?tuneTypeName), ",", "_"))) AS ?tuneTypeURI)
    BIND (IRI(CONCAT(STR(pon-resource:tunefamily), "/", REPLACE(STR(?tuneFamilyName), " ", "_"))) AS ?tuneFamilyURI)
    BIND (IRI(CONCAT(STR(pon-resource:key), "/", REPLACE(STR(?keyName), ",", "_"))) AS ?tuneKeyURI)
    BIND (IRI(CONCAT(STR(pon-resource:timesig), "/", REPLACE(STR(?timeSignatureName), "/", "_"))) AS ?tuneTimeSignatureURI)
    BIND (IRI(CONCAT(STR(pon-resource:JAMSObservation), "/", SHA1(CONCAT(?tuneId, ?title, REPLACE (STR(REPLACE(STR(?pattern_content), ", ", "_")), "/", "_"), "@", STR(?observation_time_float))))) AS ?observation_uri)
}